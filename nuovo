#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//------------------------------------------------------- DEFINIZIONE COSTANTI SIMBOLICHE -----------------------------------------------------------//
#define LUNG_NOME 30
#define LUNG_COGNOME 30
#define LUNG_DATA_DI_NASCITA 8
#define LUNG_USERNAME 15
#define LUNG_PASSWORD 10
#define LUNG_GENERE 30
#define LUNG_CANZONE 30
#define LUNG_NAZIONALITA 30
#define N_UTENTI 20
#define N_ARTISTI 20
#define MESE_MIN 1
#define MESE_MAX 12
#define ANNO_MIN 1901
#define ANNO_MAX 2018
//---------------------------------------------------------------------------------------------------------------------------------------------------//

//------------------------------------------------------------------- STRUCT ARTISTI ----------------------------------------------------------------//
typedef struct{
	int id_artista;
	char nome_artista[LUNG_NOME];
	char genere[LUNG_GENERE];
	char nazionalita[LUNG_NAZIONALITA];
	int anno_inizio;
	char canzone[LUNG_CANZONE];
}artisti;
//---------------------------------------------------------------------------------------------------------------------------------------------------//

//------------------------------------------------------------------ STRUCT UTENTI ------------------------------------------------------------------//
typedef struct{
	int id_utente;
	char nome_utente[LUNG_NOME];
	char cognome_utente[LUNG_COGNOME];
	int giorno_nascita;
	int mese_nascita;
	int anno_nascita;
	char username[LUNG_USERNAME];
	char password[LUNG_PASSWORD];
	artisti preferenza[10];
}utenti;
//---------------------------------------------------------------------------------------------------------------------------------------------------//

//--------------------------------------------------------------- PROTOTIPI DI FUNZIONE -------------------------------------------------------------//
void scritta_spotify();
void scritta_login();
void scritta_signup();
void scritta_home();
void interfaccia_iniziale(FILE* file_artisti, FILE* file_utenti, utenti utente[], artisti artista[], int i, int scelta);
void login(FILE* file_artisti, FILE* file_utenti, utenti utente[], artisti artista[], int i, int scelta);
void signup(FILE* file_artisti, FILE* file_utenti, utenti utente[], artisti artista[], int i, int scelta);
void menu_utente(FILE* file_artisti, FILE* file_utenti, utenti utente[], artisti artista[], int i, int scelta);
void visualizza_artisti(FILE* file_utenti, utenti utente[],int i,artisti artista[], int scelta);
void ricerca_artisti(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i, artisti artista[], int scelta);
void ricerca_pop(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[],int scelta);
void ricerca_genere(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[], int scelta);
void ricerca_rock(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[],int scelta);
void ricerca_rap(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[],int scelta);
void ricerca_classico(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[],int scelta);
void ricerca_musica_elettronica(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[],int scelta);
void ricerca_raggae(FILE* file_artisti, FILE* file_utenti, utenti utente[], int i,artisti artista[],int scelta);
void ricerca_anno_inizo_produzione(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[], int scelta);
//---------------------------------------------------------------------------------------------------------------------------------------------------//

int main(void)
{
	FILE* file_utenti;
    FILE* file_artisti;
	utenti utente[N_UTENTI];
    artisti artista[N_ARTISTI];
    int i=0;
    int scelta=0;

    interfaccia_iniziale(file_artisti, file_utenti, utente, artista, i, scelta);
    system("pause");
}

void scritta_spotify()
{
	printf(
		"\t\t\t\t\t\t                                                                                      \n"
		"\t\t\t\t\t\t          |||||||    ||||||||   ||||||||    ||||||||    ||    ||||||||   ||    ||     \n"
        "\t\t\t\t\t\t          ||         ||    ||   ||    ||       ||       ||    ||         ||    ||     \n"
        "\t\t\t\t\t\t          |||||||    ||||||||   ||    ||       ||       ||    ||||||     ||||||||     \n"
        "\t\t\t\t\t\t               ||    ||         ||    ||       ||       ||    ||            ||        \n"
        "\t\t\t\t\t\t          |||||||    ||         ||||||||       ||       ||    ||            ||        \n"
      );
 }

void scritta_login(){

	 printf(
		 "\n\n"
	     "        _____________\n"
         "       |  _________  |\n"
         "       | |         | |\n"
         "       | |         | |\n"
         "      _| |_________| |_\n"
         "     |       ___       |   ||\n"
	     "     |      |   |      |   ||                         ||  ||\n"
         "     |      |   |      |   ||       ||||||   ||||||       ||||||\n"
         "     |       | |       |   ||       ||  ||   ||  ||   ||  ||  ||\n"
         "     |       |_|       |   ||||||   ||||||   ||||||   ||  ||  ||\n"
         "     |_________________|                         ||\n"
         "                                             ||||||\n");
          }

void scritta_signup()
{
	 printf("\n\n"
			"     ____                                                                        ____ \n"
            "    |    |        ||||||                                                        |    |\n"
		    "    |    |        ||        ||              ||                                  |    |\n"
			"  __|    |__      ||||||          ||||||    ||||||      ||  ||    ||||||      __|    |__\n"
			"  |        |          ||    ||    ||  ||    ||  ||      ||  ||    ||  ||      |        |\n"
			"   |      |       ||||||    ||    ||||||    ||  ||      ||||||    ||||||       |      |\n"
			"    |    |                            ||                          ||            |    |\n"
			"     |__|                         ||||||                          ||             |__|\n");
 }

void scritta_home()
{

	 printf("\n\n"
			 "   ||  ||    ||||||    ||     ||    ||||||\n"
			 "   ||  ||    ||  ||    |||| ||||    ||\n"
			 "   ||||||    ||  ||    || ||  ||    ||||\n"
			 "   ||  ||    ||  ||    ||     ||    ||\n"
			 "   ||  ||    ||||||    ||     ||    ||||||\n");
 }

void interfaccia_iniziale(FILE* file_artisti, FILE* file_utenti, utenti utente[], artisti artista[], int i, int scelta)
{


	scritta_spotify();
	printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	printf("\n\t\t\t\t\t\t\t\t\t  |              1. LOGIN                 |");
	printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
	printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	printf("\n\t\t\t\t\t\t\t\t\t  |              2. SIGN UP               |");
	printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
	printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	printf("\n\t\t\t\t\t\t\t\t\t  |              3. EXIT                  |");
	printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");

	do
	{
		printf("\n\n\t\t\t\t\t\t\t\t\t   > QUALE OPERAZIONE DESIDERI EFFETTUARE?   ");
		scanf("%d", &scelta);

		if(scelta < 1 || scelta > 3)
			printf("\n\n\t\t\t\t\t\t\t\t\t       * SCELTA NON VALIDA, RIPROVA!\n\n");

	}while(!(scelta >= 1 && scelta <= 3)); //da implementare il controllo sui caratteri

	switch(scelta)
	{
		case 1: //LOGIN
			system("cls");
			scritta_spotify();
			scritta_login();
			login(file_artisti, file_utenti, utente, artista, i, scelta);
			break;

		case 2: //REGISTRAZIONE
			system("cls");
			scritta_spotify();
			scritta_signup();
			signup(file_artisti, file_utenti, utente, artista, i, scelta);
			break;

		case 3:	//EXIT
			break;
	}
}

void menu_utente(FILE* file_artisti, FILE* file_utenti, utenti utente[], artisti artista[], int i, int scelta)
{
     system("cls");

     scritta_spotify();
     printf("\n\n\t\t\t\t\t\t\t\t\t\t       Benvenuto");//SISTEMARE
     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
     printf("\n\t\t\t\t\t\t\t\t\t  |      1. VISUALIZZA LISTA ARTISTI      |");
     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
     printf("\n\t\t\t\t\t\t\t\t\t  |           2. ASCOLTA MUSICA           |");
     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
     printf("\n\t\t\t\t\t\t\t\t\t  |         3. PREFERENZA ARTISTI         |");
     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
     printf("\n\t\t\t\t\t\t\t\t\t  |           4. RICERCA ARTISTA          |");
     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
     printf("\n\t\t\t\t\t\t\t\t\t  |    5. TOP 10 ARTISTI PIU'ASCOLTATI    |");
     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
     printf("\n\t\t\t\t\t\t\t\t\t  |              6. PROFILO               |");
     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
     printf("\n\t\t\t\t\t\t\t\t\t  |              7. LOGOUT                |");
     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");

     do
	{
		printf("\n\n\t\t\t\t\t\t\t\t\t   > QUALE OPERAZIONE DESIDERI EFFETTUARE?   ");
		scanf("%d", &scelta);

		if(scelta < 1 || scelta > 7)
			printf("\n\n\t\t\t\t\t\t\t\t\t       * SCELTA NON VALIDA, RIPROVA!\n\n");

	}while(!(scelta >= 1 && scelta <= 7)); //da implementare il controllo sui caratteri


     switch(scelta)
     {

     	 case 1: //visualizza_artisti
     		 system("cls");
     		 scritta_spotify();
     		 visualizza_artisti(file_utenti, utente, i, artista, scelta);
     		 break;

     	 case 2:
     		 break;

     	 case 3:
     		 break;

     	 case 4:
     		system("cls");
     		scritta_spotify();
     		ricerca_artisti(file_artisti, file_utenti, utente, i, artista, scelta);
     		 break;

     	 case 5:
     		 break;

		  case 6:
			 break;

		  case 7:
			  system("cls");
			  interfaccia_iniziale(file_artisti, file_utenti, utente, artista, i, scelta);
			  break;
     }
}

void signup(FILE* file_artisti, FILE* file_utenti, utenti utente[], artisti artista[], int i, int scelta)
{
	int count_utenti=0; //contatore del n di utenti
	i=0;

	if((file_utenti =  fopen("Utenti.txt" , "a+")) == NULL)
		printf("Errore nell'apertura!\n");

	else
	{
		while(!feof(file_utenti))
		{
			fscanf(file_utenti,"%s %s %d %d %d %s %s\n", utente[i].nome_utente, utente[i].cognome_utente,&utente[i].mese_nascita,&utente[i].giorno_nascita,&utente[i].anno_nascita,utente[i].username,utente[i].password);
			count_utenti++;
			i++;
		}

		printf("\n\n\n> INSERISCI IL NOME:   ");
		scanf("%s", utente[count_utenti].nome_utente);
		printf("\n\n> INSERISCI IL COGNOME:   ");
		scanf("%s", utente[count_utenti].cognome_utente);

		printf("\n\nDATA DI NASCITA: ");
		do
		{
			printf("\n\n\t> INSERISCI IL MESE DI NASCITA:   ");
			scanf("%d",&utente[count_utenti].mese_nascita);

			if(utente[count_utenti].mese_nascita < MESE_MIN|| utente[count_utenti].mese_nascita > MESE_MAX)
			printf("\n\t   * MESE NON VALIDO! INSERISCI UN VALORE COMPRESO TRA 1 E 12.\n");

		}while(utente[count_utenti].mese_nascita < MESE_MIN || utente[count_utenti].mese_nascita > MESE_MAX);

		if(utente[count_utenti].mese_nascita == 2) //mese febbraio
		{
			do
			{
				printf("\n\n\t> INSERISCI IL GIORNO DI NASCITA:   ");
				scanf("%d",&utente[0].giorno_nascita);

				if(utente[count_utenti].giorno_nascita < 1|| utente[count_utenti].giorno_nascita > 28)
					printf("\n\t   * GIORNO NON VALIDO! INSERISCI UN VALORE COMPRESO TRA 1 E 28.\n");

				 }while(utente[count_utenti].giorno_nascita < 1 || utente[count_utenti].giorno_nascita > 28);
			}


		else if(utente[count_utenti].mese_nascita == 4 || utente[count_utenti].mese_nascita == 6 || utente[count_utenti].mese_nascita == 9 || utente[count_utenti].mese_nascita == 11)
		{
			do
			{
				printf("\n\n\t> INSERISCI GIORNO DI NASCITA:   ");
				scanf("%d",&utente[count_utenti].giorno_nascita);

				if(utente[count_utenti].giorno_nascita < 1 || utente[count_utenti].giorno_nascita > 30)
				   printf("\n\t   * GIORNO NON VALIDO! INSERISCI UN VALORE COMPRESO TRA 1 E 30\n");

			}while(utente[count_utenti].giorno_nascita < 1 || utente[count_utenti].giorno_nascita > 30);

		}

		else if(utente[count_utenti].mese_nascita == 1 || utente[count_utenti].mese_nascita == 3 || utente[count_utenti].mese_nascita == 5 || utente[count_utenti].mese_nascita == 7 || utente[count_utenti].mese_nascita == 8 || utente[count_utenti].mese_nascita == 10 || utente[count_utenti].mese_nascita == 12)
		{
			do
			{
				printf("\n\n\t> INSERISCI IL GIORNO DI NASCITA:   ");
				 scanf("%d",&utente[count_utenti].giorno_nascita);

				if(utente[count_utenti].giorno_nascita < 1 || utente[count_utenti].giorno_nascita > 31)
				   printf("\n\t   * GIORNO NON VALIDO! INSERISCI UN VALORE COMPRESO TRA 1 E 31\n");

			}while(utente[count_utenti].giorno_nascita < 1 || utente[count_utenti].giorno_nascita > 31);
		}

		do
		{
			printf("\n\n\t> INSERISCI L'ANNO DI NASCITA:   ");
			scanf("%d",&utente[count_utenti].anno_nascita);

			if(utente[count_utenti].anno_nascita < ANNO_MIN || utente[count_utenti].anno_nascita > ANNO_MAX)
				printf("\n\t   * ANNO NON VALIDO! INSERISCI UN VALORE COMPRESO TRA 1901 E 2018\n");

		 }while(utente[count_utenti].anno_nascita < ANNO_MIN || utente[count_utenti].anno_nascita > ANNO_MAX);

		do
		{
			printf("\n\n> INSERISCI L'USERNAME:   ");
			scanf("%s",	utente[count_utenti].username);

			if(strlen(utente[count_utenti].username) > LUNG_USERNAME)
				printf("\n\t   * USERNAME NON VALIDO! INSERISCI MAX 15 CARATTERI\n");

		}while(strlen(utente[count_utenti].username) > LUNG_USERNAME);

		int count_maiuscole=0; 	//contatore caratteri maiuscoli
		int count_numeri=0;		//contatore caratteri numerici

		printf("\n\n\n- NOTA PASSWORD: Numero caratteri compreso tra 5 e 10, con almeno una maiuscola e almeno un numero\n");

		int lung_password_in=0;
		int j=0; //indice password
		do
		{
			printf("\n\n> INSERISCI LA PASSWORD:   ");
			scanf("%s", utente[count_utenti].password);

			count_maiuscole= 0; //azzeramento della variabile "maiuscole"
			count_numeri=	0;		//azzeramento della variabile "numeri"

			lung_password_in= strlen(utente[count_utenti].password);

			for(j=0; j < lung_password_in; j++)
			{
				count_numeri= count_numeri + isdigit(utente[count_utenti].password[j]); //conteggio delle cifre numeriche presenti nella password inserita
				count_maiuscole= count_maiuscole + isupper(utente[count_utenti].password[j]); //conteggio delle lettere maiuscole presenti nella password inserita

				if((count_numeri > 0) && (count_maiuscole > 0))
					j= lung_password_in; //non vi è il bisogno di eseguire tutti i cicli se è stata già rilevata una lettara maiuscola e una cifra numerica
			}

			if((lung_password_in < (LUNG_PASSWORD / 2)) || (lung_password_in > LUNG_PASSWORD))
				printf("\n   * PASSWORD NON VALIDA! INSERIRE UN NUMERO DI CARATTERI COMPRESO TRA 5 E 10\n");

			if	(count_numeri	==	0) //verifica se la password inserita non ha una cifra numerica
				printf("\n   * PASSWORD NON VALIDA! INSERIRE ALMENO UN NUMERO\n");

			if	(count_maiuscole == 0)	//verifica se la password inserita non ha una lettera maiuscola
				printf("\n   * PASSWORD NON VALIDA! INSERIRE ALMENO UN CARATTERE MAIUSCOLO\n");

		}while(!((count_numeri > 0) && (count_maiuscole > 0) && (lung_password_in >= (LUNG_PASSWORD / 2)) && (lung_password_in <= LUNG_PASSWORD))); //ripete il ciclo finchè i vincoli imposti sulla sintassi della password non sono rispettati

		fprintf(file_utenti, "%s\t%s\t%d\t%d\t%d\t%s\t%s\n", utente[count_utenti].nome_utente, utente[count_utenti].cognome_utente, utente[count_utenti].giorno_nascita,  utente[count_utenti].mese_nascita, utente[count_utenti].anno_nascita, utente[count_utenti].username, utente[count_utenti].password);

		fclose(file_utenti);

		printf("\n\n\tISCRIZIONE EFFETTUATA!\n");

		do
		{
			printf("\n\n> ORA PREMI '0' PER ACCEDERE:   ");
			scanf("%d", &scelta);

			if(scelta == 0)
			{
				system("cls");
				scritta_spotify();
				scritta_login();
				login(file_artisti, file_utenti, utente, artista, i, scelta);
			}

			else
				printf("\n\n   * INPUT NON VALIDO, RIPROVA!\n\n");

		}while(scelta != 0);
	}

}

void login(FILE* file_artisti, FILE* file_utenti, utenti utente[], artisti artista[], int i, int scelta)
{
	char username_ricercato[LUNG_USERNAME];
	char password_ricercata[LUNG_PASSWORD];
	//int count_utenti=0;

	if((file_utenti =  fopen("Utenti.txt" , "r")) == NULL)
		printf("Errore nell'apertura!\n");

	else
	{
		int username_trovato=0;

		printf("\n> INSERISCI USERNAME:  ");
		scanf("%s",username_ricercato);

		i=0;

		while(!feof(file_utenti))
		{
			fscanf(file_utenti,"%s %s %d %d %d %s %s\n",utente[i].nome_utente, utente[i].cognome_utente, &utente[i].mese_nascita, &utente[i].giorno_nascita, &utente[i].anno_nascita, utente[i].username, utente[i].password);

			if((strcmp(username_ricercato, utente[i].username) == 0))
			{
				username_trovato++;
				do
				{
					printf("\n> INSERISCI PASSWORD:  ");
					scanf("%s",password_ricercata);

					if(strcmp(password_ricercata, utente[i].password) != 0)
						printf("\n\n   * PASSWORD NON VALIDA, RIPROVA!\n\n");

				}while(!(strcmp(password_ricercata, utente[i].password) == 0));

				menu_utente(file_artisti, file_utenti, utente, artista, i, scelta);
			}

			if(feof(file_utenti) && username_trovato == 0)
			{
				printf("\n\n   * USERNAME NON ISCRITTO!\n\n");

				printf("\n\n1. RIPROVA\n");
				printf("\n2. ISCRIVITI ");

				do
				{
					printf("\n\n> QUALE OPERAZIONE DESIDERI EFFETTUARE?   ");
					scanf("%d", &scelta); //

					if( scelta == 1)
					{
						system("cls");
						scritta_spotify();
						scritta_login();
						login(file_artisti, file_utenti, utente, artista, i, scelta);
					}

					if( scelta == 2)
					{
						system("cls");
						scritta_spotify();
						scritta_signup();
						signup(file_artisti, file_utenti, utente, artista, i, scelta);
					}

					else if(scelta != 1 && scelta != 2)
						printf("\n\n   * INPUT NON VALIDO, RIPROVA!\n\n");

				}while(scelta < 1 || scelta > 2);
			}

			else
				i++;
		}
	}

	//effettua ciclo x dati errati
	//if(count_utenti == i)
	//	printf("\nDATI INSERITI ERRATI, RIPROVA!\n");
}

void visualizza_artisti(FILE* file_utenti, utenti utente[],int i,artisti artista[], int scelta)
{
	FILE*file_artisti;

	    printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
		printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
		printf("\n\t\t\t\t\t\t\t\t\t  |        VISUALIZZA LISTA ARTISTI       |");
		printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");

	if((file_artisti =  fopen("Artisti.txt" , "r")) == NULL)
		printf("Errore nell'apertura!\n");

	else
	{
		printf("\n\n\n\t\t\t\t\tNOME ARTISTA   |      GENERE MUSICALE|        NAZIONALITA'|   ANNO INIZIO CARRIERA|  CANZONE POPOLARE  |\n\n");

		i=0;

		while(!feof(file_artisti))
		{
			fscanf(file_artisti,"%s %s %s %d %s", artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, &artista[i].anno_inizio, artista[i].canzone);
			printf("\t\t\t\t   %20s|%21s|%20s|%23d|%20s|  \n",artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, artista[i].anno_inizio, artista[i].canzone);

			i++;
		}
	}

	do
	{
		printf("\n\n\n> PREMI '0' PER RITORNARE AL MENU':   ");
		scanf("%d", &scelta);

		if(scelta != 0)
			printf("\n\n   * INPUT NON VALIDO, RIPROVA!\n\n");

		else
			menu_utente(file_artisti, file_utenti, utente, artista, i, scelta);
	}while(scelta != 0);
}

void ricerca_artisti(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i, artisti artista[], int scelta)
{
	   	printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
		printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
		printf("\n\t\t\t\t\t\t\t\t\t  |            RICERCA ARTISTA            |");
		printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");

		if((file_artisti =  fopen("Artisti.txt" , "r")) == NULL)
			printf("Errore nell'apertura!\n");

		else
		{
			printf("\n\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
			printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
			printf("\n\t\t\t\t\t\t\t\t\t  |           1. GENERE MUSICALE          |");
			printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
			printf("\n\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
			printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
			printf("\n\t\t\t\t\t\t\t\t\t  |       2. ANNO INIZIO PRODUZIONE       |");
			printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");

			printf("\n\n\t\t\t\t\t\t\t\t   > PER QUALE PARAMETRO DESIDERA RICERCARE GLI ARTISTI?   ");
//CONTROLLOOOOOOOOOOOO
			scanf("%d",&scelta);

			switch(scelta)
			{

				case 1:
					system("cls");
					scritta_spotify();
					ricerca_genere(file_artisti, file_utenti, utente, i, artista, scelta);
					break;

				case 2:
					system("cls");
					scritta_spotify();
					ricerca_anno_inizo_produzione(file_artisti, file_utenti, utente, i, artista, scelta);

					break;

				case 3:
					break;

				case 4:
					break;

				case 5:
					break;

				case 6:
					break;

			}
		}
		fclose(file_artisti);
}

void ricerca_pop(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[],int scelta)
{
	printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	printf("\n\t\t\t\t\t\t\t\t\t  |                  POP                  |");
	printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");

	printf("\n\n\n\t\t\t\t\tNOME ARTISTA   |      GENERE MUSICALE|        NAZIONALITA'|   ANNO INIZIO CARRIERA|  CANZONE POPOLARE  |\n\n");

	 while(!feof(file_artisti))
	 {
			fscanf(file_artisti,"%s %s %s %d %s", artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, &artista[i].anno_inizio, artista[i].canzone);
			if(strcmp(artista[i].genere, "Pop")==0)
			{
				printf("\t\t\t\t   %20s|%21s|%20s|%23d|%20s|  \n",artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, artista[i].anno_inizio, artista[i].canzone);
			}
			i++;
	 }

	 do
	 	{
	 		printf("\n\n\n> PREMI '0' PER RITORNARE AL MENU':   ");
	 		scanf("%d", &scelta);

	 		if(scelta != 0)
	 			printf("\n\n   * INPUT NON VALIDO, RIPROVA!\n\n");

	 		else
	 			menu_utente(file_artisti, file_utenti, utente, artista, i, scelta);
	 	}while(scelta != 0);
}

void ricerca_genere(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[], int scelta)
{
	do{
	     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |            GENERE MUSICALE            |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
	     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |                1. POP                 |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
	     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |                2. ROCK                |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
	     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |                 3. RAP                |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
	     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |              4. CLASSICO              |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
	     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |         5. MUSICA ELETTRONICA         |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
	     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |              6. RAGGAE                |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");
	     printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	     printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |                7. EXIT                |");
	     printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");

	     do
	    	{
	    		printf("\n\n\t\t\t\t\t\t\t\t\t   > QUALE OPERAZIONE DESIDERI EFFETTUARE?   ");
	    		scanf("%d", &scelta);

	    		if(scelta < 1 || scelta > 7)
	    			printf("\n\n\t\t\t\t\t\t\t\t\t       * SCELTA NON VALIDA, RIPROVA!\n\n");

	    	}while(!(scelta >= 1 && scelta <= 7)); //da implementare il controllo sui caratteri


	     			switch(scelta)
	     			{

	     				case 1:
	     					system("cls");
	     					scritta_spotify();
	     					ricerca_pop(file_artisti,file_utenti, utente, i, artista, scelta);
	     					break;

	     				case 2:
	     					system("cls");
	     					scritta_spotify();
	     					ricerca_rock(file_artisti,file_utenti, utente, i, artista, scelta);
	     					break;

	     				case 3:
	     					system("cls");
	     					scritta_spotify();
	     					ricerca_rap(file_artisti,file_utenti, utente, i, artista, scelta);
	     					break;

	     				case 4:
	     					system("cls");
	     				    scritta_spotify();
	     					ricerca_classico(file_artisti,file_utenti, utente, i, artista, scelta);
	     					break;

	     				case 5:
	     					system("cls");
	     				    scritta_spotify();
	     					ricerca_musica_elettronica(file_artisti,file_utenti, utente, i, artista, scelta);
	     					break;

	     				case 6:
	     					system("cls");
	     					scritta_spotify();
	     					ricerca_raggae(file_artisti,file_utenti, utente, i, artista, scelta);
	     					break;

	     				case 7:
	     					menu_utente(file_artisti, file_utenti, utente, artista, i, scelta);
	     					break;

	     			}
	}while(scelta);
}

void ricerca_rock(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[],int scelta)
{
	printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	printf("\n\t\t\t\t\t\t\t\t\t  |                  ROCK                 |");
	printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");

	printf("\n\n\n\t\t\t\t\tNOME ARTISTA   |      GENERE MUSICALE|        NAZIONALITA'|   ANNO INIZIO CARRIERA|  CANZONE POPOLARE  |\n\n");

	 while(!feof(file_artisti))
	 {
			fscanf(file_artisti,"%s %s %s %d %s", artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, &artista[i].anno_inizio, artista[i].canzone);
			if(strcmp(artista[i].genere, "Rock")==0)
			{
				printf("\t\t\t\t   %20s|%21s|%20s|%23d|%20s|  \n",artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, artista[i].anno_inizio, artista[i].canzone);
			}
			i++;
	 }

	 do
	 	{
	 		printf("\n\n\n> PREMI '0' PER RITORNARE AL MENU':   ");
	 		scanf("%d", &scelta);

	 		if(scelta != 0)
	 			printf("\n\n   * INPUT NON VALIDO, RIPROVA!\n\n");

	 		else
	 			menu_utente(file_artisti, file_utenti, utente, artista, i, scelta);
	 	}while(scelta != 0);
}

void ricerca_rap(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[],int scelta)
{
	printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	printf("\n\t\t\t\t\t\t\t\t\t  |                   RAP                 |");
	printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");

	printf("\n\n\n\t\t\t\t\tNOME ARTISTA   |      GENERE MUSICALE|        NAZIONALITA'|   ANNO INIZIO CARRIERA|  CANZONE POPOLARE  |\n\n");

	 while(!feof(file_artisti))
	 {
			fscanf(file_artisti,"%s %s %s %d %s", artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, &artista[i].anno_inizio, artista[i].canzone);
			if(strcmp(artista[i].genere, "Rap")==0)
			{
				printf("\t\t\t\t   %20s|%21s|%20s|%23d|%20s|  \n",artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, artista[i].anno_inizio, artista[i].canzone);
			}
			i++;
	 }

	 do
	 	{
	 		printf("\n\n\n> PREMI '0' PER RITORNARE AL MENU':   ");
	 		scanf("%d", &scelta);

	 		if(scelta != 0)
	 			printf("\n\n   * INPUT NON VALIDO, RIPROVA!\n\n");

	 		else
	 			menu_utente(file_artisti, file_utenti, utente, artista, i, scelta);
	 	}while(scelta != 0);
}

void ricerca_classico(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[],int scelta)
{
	printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	printf("\n\t\t\t\t\t\t\t\t\t  |               CLASSICO                |");
	printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");

	printf("\n\n\n\t\t\t\t\tNOME ARTISTA   |      GENERE MUSICALE|        NAZIONALITA'|   ANNO INIZIO CARRIERA|  CANZONE POPOLARE  |\n\n");

	 while(!feof(file_artisti))
	 {
			fscanf(file_artisti,"%s %s %s %d %s", artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, &artista[i].anno_inizio, artista[i].canzone);
			if(strcmp(artista[i].genere, "Classico")==0)
			{
				printf("\t\t\t\t   %20s|%21s|%20s|%23d|%20s|  \n",artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, artista[i].anno_inizio, artista[i].canzone);
			}
			i++;
	 }

	 do
	 	{
	 		printf("\n\n\n> PREMI '0' PER RITORNARE AL MENU':   ");
	 		scanf("%d", &scelta);

	 		if(scelta != 0)
	 			printf("\n\n   * INPUT NON VALIDO, RIPROVA!\n\n");

	 		else
	 			menu_utente(file_artisti, file_utenti, utente, artista, i, scelta);
	 	}while(scelta != 0);
}

void ricerca_musica_elettronica(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[],int scelta)
{
	printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	printf("\n\t\t\t\t\t\t\t\t\t  |          MUSICA ELETTRONICA           |");
	printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");

	printf("\n\n\n\t\t\t\t\tNOME ARTISTA   |      GENERE MUSICALE|        NAZIONALITA'|   ANNO INIZIO CARRIERA|  CANZONE POPOLARE  |\n\n");

	 while(!feof(file_artisti))
	 {
			fscanf(file_artisti,"%s %s %s %d %s", artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, &artista[i].anno_inizio, artista[i].canzone);
			if(strcmp(artista[i].genere, "Musica_elettronica")==0)
			{
				printf("\t\t\t\t   %20s|%21s|%20s|%23d|%20s|  \n",artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, artista[i].anno_inizio, artista[i].canzone);
			}
			i++;
	 }

	 do
	 	{
	 		printf("\n\n\n> PREMI '0' PER RITORNARE AL MENU':   ");
	 		scanf("%d", &scelta);

	 		if(scelta != 0)
	 			printf("\n\n   * INPUT NON VALIDO, RIPROVA!\n\n");

	 		else
	 			menu_utente(file_artisti, file_utenti, utente, artista, i, scelta);
	 	}while(scelta != 0);
}

void ricerca_raggae(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[],int scelta)
{
	printf("\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
	printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
	printf("\n\t\t\t\t\t\t\t\t\t  |                 RAGGAE                |");
	printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");

	printf("\n\n\n\t\t\t\t\tNOME ARTISTA   |      GENERE MUSICALE|        NAZIONALITA'|   ANNO INIZIO CARRIERA|  CANZONE POPOLARE  |\n\n");

	 while(!feof(file_artisti))
	 {
			fscanf(file_artisti,"%s %s %s %d %s", artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, &artista[i].anno_inizio, artista[i].canzone);
			if(strcmp(artista[i].genere, "Raggae")==0)
			{
				printf("\t\t\t\t   %20s|%21s|%20s|%23d|%20s|  \n",artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, artista[i].anno_inizio, artista[i].canzone);
			}
			i++;
	 }

	 do
	 	{
	 		printf("\n\n\n> PREMI '0' PER RITORNARE AL MENU':   ");
	 		scanf("%d", &scelta);

	 		if(scelta != 0)
	 			printf("\n\n   * INPUT NON VALIDO, RIPROVA!\n\n");

	 		else
	 			menu_utente(file_artisti, file_utenti, utente, artista, i, scelta);
	 	}while(scelta != 0);
}

void ricerca_anno_inizo_produzione(FILE* file_artisti,FILE* file_utenti, utenti utente[], int i,artisti artista[], int scelta)
{
 int primo_anno=0, secondo_anno=0;

 printf("\n\n\n\t\t\t\t\t\t\t\t\t   _______________________________________");
 printf("\n\t\t\t\t\t\t\t\t\t  |                                       |");
 printf("\n\t\t\t\t\t\t\t\t\t  |        ANNO INIZIO PRODUZIONE         |");
 printf("\n\t\t\t\t\t\t\t\t\t  |_______________________________________|");

 do
 {
	 printf("\nINSERISCI ANNO INIZIO RICERCA:   ");
	 scanf("%d",&primo_anno);
	 printf("\nINSERISCI ANNO FINE RICERCA:   ");
	 scanf("%d",&secondo_anno);

	 if(primo_anno>secondo_anno)
	 {
	  printf("\n\t   * ANNO NON VALIDO! ANNO INIZIO RICERCA PIU' GRANDE DELL' ANNO DI FINE RICERCA!\n\n");
	 }
	 else if(primo_anno>2018 || secondo_anno>2018 || primo_anno<1901 || secondo_anno<1901)
	 {
	  printf("\n\t   * ANNO NON VALIDO! INSERIRE UN VALORE COMPRESO TRA 1901 E 2018!\n\n");
	 }

 }while(primo_anno>secondo_anno || primo_anno>2018 || secondo_anno>2018 || primo_anno<1901 || secondo_anno<1901 );



 printf("\n\n\n\t\t\t\t\tNOME ARTISTA   |      GENERE MUSICALE|        NAZIONALITA'|   ANNO INIZIO CARRIERA|  CANZONE POPOLARE  |\n\n");

 	 while(!feof(file_artisti))
 	 {
 			fscanf(file_artisti,"%s %s %s %d %s", artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, &artista[i].anno_inizio, artista[i].canzone);
 			if(artista[i].anno_inizio>=primo_anno && artista[i].anno_inizio<=secondo_anno)
 			{
 				printf("\t\t\t\t   %20s|%21s|%20s|%23d|%20s|  \n",artista[i].nome_artista, artista[i].genere, artista[i].nazionalita, artista[i].anno_inizio, artista[i].canzone);
 			}
 			i++;
 	 }

 	 do
 	 	{
 	 		printf("\n\n\n> PREMI '0' PER RITORNARE AL MENU':   ");
 	 		scanf("%d", &scelta);

 	 		if(scelta != 0)
 	 			printf("\n\n   * INPUT NON VALIDO, RIPROVA!\n\n");

 	 		else
 	 			menu_utente(file_artisti, file_utenti, utente, artista, i, scelta);
 	 	}while(scelta != 0);


}
